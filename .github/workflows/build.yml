name: Build and publish docker images

on:
  push:
  workflow_dispatch:

env:
  PLATFORM_LIST: linux/amd64,linux/arm64

jobs:
  base-images:
    strategy:
      fail-fast: false
      matrix:
        base_image: [
          "ubuntu:16.04",
          "ubuntu:18.04",
          "ubuntu:20.04",
          "ubuntu:22.04",
          "ubuntu:24.04",
          "ubuntu:25.04",
          "debian:bullseye-slim",
          "debian:bookworm-slim",
        ]

    runs-on: ubuntu-latest
    steps:
      - name: Setup target image name
        shell: bash
        run: |
          echo "TARGET_IMAGE_NAME=ghcr.io/dnkpp/${{ matrix.base_image }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ env.PLATFORM_LIST }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORM_LIST }}

      - name: Login to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.TARGET_IMAGE_NAME }}
          # OCI Image Spec:
          # https://github.com/opencontainers/image-spec/blob/main/annotations.md
          labels: |
            maintainer=${{ github.actor }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./base/Dockerfile
          push: true
          outputs: type=image,name=target
          tags: ${{ env.TARGET_IMAGE_NAME }}
          platforms: ${{ env.PLATFORM_LIST }}
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}

  clang-images:
    needs: base-images
    strategy:
      fail-fast: false
      matrix:
        config:
          - compiler_version: "7"
            base_image: "ubuntu:18.04"
            other_packages: "libc++-7-dev libc++abi-7-dev"

          - compiler_version: "8"
            base_image: "ubuntu:20.04"
            other_packages: "libc++-8-dev libc++abi-8-dev"

          - compiler_version: "9"
            base_image: "ubuntu:20.04"
            other_packages: "libc++-9-dev libc++abi-9-dev"

          - compiler_version: "10"
            base_image: "ubuntu:20.04"
            other_packages: "libc++-10-dev libc++abi-10-dev"

          - compiler_version: "11"
            base_image: "ubuntu:20.04"
            other_packages: "libc++-11-dev libc++abi-11-dev"

          - compiler_version: "12"
            base_image: "ubuntu:22.04"
            other_packages: "libc++-12-dev libc++abi-12-dev"

          - compiler_version: "13"
            base_image: "ubuntu:22.04"
            other_packages: "libc++-13-dev libc++abi-13-dev"

          - compiler_version: "14"
            base_image: "ubuntu:22.04"
            other_packages: "libc++-14-dev libc++abi-14-dev"

          - compiler_version: "15"
            base_image: "ubuntu:22.04"
            other_packages: "libc++-15-dev libc++abi-15-dev"

          - compiler_version: "16"
            base_image: "ubuntu:24.04"
            other_packages: "libc++-16-dev libc++abi-16-dev"
            x86_packages: "gcc-13-multilib g++-13-multilib"

          - compiler_version: "17"
            base_image: "ubuntu:24.04"
            other_packages: "libc++-17-dev libc++abi-17-dev"
            x86_packages: "gcc-13-multilib g++-13-multilib"

          - compiler_version: "18"
            base_image: "ubuntu:24.04"
            other_packages: "libc++-18-dev libc++abi-18-dev"
            x86_packages: "gcc-13-multilib g++-13-multilib"

          - compiler_version: "19"
            base_image: "ubuntu:25.04"
            other_packages: "libc++-19-dev libc++abi-19-dev"
            x86_packages: "gcc-14-multilib g++-14-multilib"

          - compiler_version: "20"
            base_image: "ubuntu:25.04"
            other_packages: "libc++-20-dev libc++abi-20-dev"
            x86_packages: "gcc-15-multilib g++-15-multilib"

    ################################
    #
    # clang
    #
    runs-on: ubuntu-latest
    steps:
      - name: Setup target image name
        shell: bash
        run: |
          echo "TARGET_IMAGE_NAME=ghcr.io/dnkpp/clang:${{ matrix.config.compiler_version }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ env.PLATFORM_LIST }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORM_LIST }}

      - name: Login to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.TARGET_IMAGE_NAME }}
          # OCI Image Spec:
          # https://github.com/opencontainers/image-spec/blob/main/annotations.md
          labels: |
            maintainer=${{ github.actor }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./clang/Dockerfile
          push: true
          outputs: type=image,name=target
          tags: ${{ env.TARGET_IMAGE_NAME }}
          platforms: ${{ env.PLATFORM_LIST }}
          build-args: |
            BASE_IMAGE=ghcr.io/dnkpp/${{ matrix.config.base_image }}
            COMPILER_VERSION=${{ matrix.config.compiler_version }}
            PACKAGE_LIST=${{matrix.config.other_packages}}
            X86_PACKAGE_LIST=${{matrix.config.x86_packages}}

  ################################
  #
  # GCC
  #
  gcc-images:
    needs: base-images
    strategy:
      fail-fast: false
      matrix:
        config:
          - compiler_version: "4.8"
            base_image: "ubuntu:18.04"
            other_packages: "libc++-dev libc++abi-dev"

          - compiler_version: "4.9"
            base_image: "ubuntu:16.04"
            other_packages: "libc++-dev libc++abi-dev"

          - compiler_version: "5"
            base_image: "ubuntu:18.04"
            other_packages: "libc++-dev libc++abi-dev"

          - compiler_version: "6"
            base_image: "ubuntu:18.04"
            other_packages: "libc++-dev libc++abi-dev"

          - compiler_version: "7"
            base_image: "ubuntu:20.04"
            other_packages: "libc++-dev libc++abi-dev"

          - compiler_version: "8"
            base_image: "ubuntu:20.04"
            other_packages: "libc++-dev libc++abi-dev"

          - compiler_version: "9"
            base_image: "ubuntu:22.04"
            other_packages: "libc++-dev libc++abi-dev"

          - compiler_version: "10"
            base_image: "ubuntu:22.04"
            other_packages: "libc++-dev libc++abi-dev"

          - compiler_version: "11"
            base_image: "ubuntu:22.04"
            other_packages: "libc++-dev libc++abi-dev"

          - compiler_version: "12"
            base_image: "ubuntu:22.04"
            other_packages: "libc++-dev libc++abi-dev"

          - compiler_version: "13"
            base_image: "ubuntu:24.04"
            other_packages: "libc++-18-dev libc++abi-18-dev"

          - compiler_version: "14"
            base_image: "ubuntu:24.04"
            other_packages: "libc++-dev libc++abi-dev"

          - compiler_version: "15"
            base_image: "ubuntu:25.04"
            other_packages: "libc++-dev libc++abi-dev"

    runs-on: ubuntu-latest
    steps:
      - name: Setup target image name
        shell: bash
        run: |
          echo "TARGET_IMAGE_NAME=ghcr.io/dnkpp/gcc:${{ matrix.config.compiler_version }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ env.PLATFORM_LIST }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORM_LIST }}

      - name: Login to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.TARGET_IMAGE_NAME }}
          # OCI Image Spec:
          # https://github.com/opencontainers/image-spec/blob/main/annotations.md
          labels: |
            maintainer=${{ github.actor }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./gcc/Dockerfile
          push: true
          outputs: type=image,name=target
          tags: ${{ env.TARGET_IMAGE_NAME }}
          platforms: ${{ env.PLATFORM_LIST }}
          build-args: |
            BASE_IMAGE=ghcr.io/dnkpp/${{ matrix.config.base_image }}
            COMPILER_VERSION=${{ matrix.config.compiler_version }}
            PACKAGE_LIST=${{matrix.config.other_packages}}
